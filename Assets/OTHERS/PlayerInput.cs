//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.8.2
//     from Assets/OTHERS/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""CharacterControls"",
            ""id"": ""20d66c09-b889-4699-be6e-a17a722683fe"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""4f356870-0f93-4267-802f-449b9d629c2a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""1a56e10e-7322-4e62-b930-cdd5789cf68d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraFocus"",
                    ""type"": ""PassThrough"",
                    ""id"": ""830124c9-6a82-4ff5-9ac5-3e02a014c426"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraRotateRight"",
                    ""type"": ""Button"",
                    ""id"": ""103e1b7a-cb19-4271-a39b-bd061f632d3d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraRotateLeft"",
                    ""type"": ""Button"",
                    ""id"": ""e1edb027-6009-44d3-9e39-c9db05adfb8d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""762e2d40-8876-4b43-b9b9-1ee3e3ee51e6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""5b1e6949-9634-404f-ae7e-3c5e0b4af191"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MovementsMouse"",
                    ""type"": ""Button"",
                    ""id"": ""d09e7b3a-a401-4fbf-85de-d0f8cecdba59"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ff9f29b3-cff2-4b06-a67e-8dd1941a677d"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""cba3c42b-6639-4d28-a5ef-e88f9531a439"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""eecf5c0d-ccb7-40f7-aaf6-2bdf7510ba8e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c2479426-e899-4aca-995a-519ec5fa24c7"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a4d0629c-16f1-43b1-8294-3796c4a234a2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c9f92594-f1c6-41ee-bf02-5af09271dfc1"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""531aaf12-ff2c-4899-90ec-fbe72b88c3d9"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a40e6f16-18bc-4713-9325-4940d1fc4ab3"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6fbf2837-c7de-4457-b1bf-06661cdc2c85"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraFocus"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""26ae9e14-0e84-4134-a13e-236868221a5e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraFocus"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""341cae03-27ab-47cb-ab61-46d81b794b8e"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraRotateRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""702e472c-819d-423c-9245-b2eb32a98dd9"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraRotateRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d9eaa423-c4a8-4a2b-b80b-ad350af2fe2c"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraRotateLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""576febba-bd07-427f-9975-b3e810aa185f"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraRotateLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""856ab9a2-a92a-40ec-8e66-173104502704"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f65b469c-178f-4af8-bd9b-3af4a0126307"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8e95d0a0-0c53-4212-b61b-0b698a19270b"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d4be956-9f46-4091-8b00-8d7a404efc29"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""011fca87-c941-452e-80a5-a9c680e19db5"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementsMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Interface"",
            ""id"": ""0cdd3cad-52d5-454a-bbb0-adede5d9b133"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""52db8c4f-4b98-48c9-81f9-c30590246dae"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""0f2a97fa-713d-46d3-a459-d9d0fbcb59d9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2cec3dc5-b602-4e38-87d5-f4ae33a5f7f4"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13a729a4-4899-4c2b-86a0-49d0d5fedb37"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""931fd9d3-6618-4ced-b634-82b83fdd76d8"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""74e73c1a-fd4b-494a-a966-753dd9d68b70"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""DebugKeys"",
            ""id"": ""0ad0f07a-2c98-4a47-9bcd-d0c5ecdfc0ce"",
            ""actions"": [
                {
                    ""name"": ""Debug"",
                    ""type"": ""PassThrough"",
                    ""id"": ""053c73c8-e4c9-4811-a7dc-be3224a5283a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GenerateIsland"",
                    ""type"": ""Button"",
                    ""id"": ""76cbd96f-ff6b-4b5e-abff-49427fb96af9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GenerateIslandUp"",
                    ""type"": ""Button"",
                    ""id"": ""18f4872a-26bf-4950-a427-0b1b42afc08f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GenerateIslandRight"",
                    ""type"": ""Button"",
                    ""id"": ""00305b15-a918-4f7f-9153-70e97afbb1ec"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GenerateIslandDown"",
                    ""type"": ""Button"",
                    ""id"": ""cf884c95-7a02-478a-8543-082a5382da33"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GenerateIslandLeft"",
                    ""type"": ""Button"",
                    ""id"": ""64b5f599-57a1-41be-89c5-a2fdb91a87b9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DamageEnemy"",
                    ""type"": ""Button"",
                    ""id"": ""581a7e2b-f6f7-4f22-8900-5b6c3c65477b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CastSpell"",
                    ""type"": ""Button"",
                    ""id"": ""ee1b8940-71b1-47c5-8646-d7b3324008f8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RerollIslands"",
                    ""type"": ""Button"",
                    ""id"": ""60d417ef-9547-4da4-b553-66ffc1d514c9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DamagePlayer"",
                    ""type"": ""Button"",
                    ""id"": ""c02f86f5-c2f8-4719-a381-6498654748c8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e5ea6887-5b29-497c-89a2-418473176ab4"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Debug"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea4dedbc-f78a-4048-bc8b-d864ad77b20f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GenerateIsland"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dc0374b9-b5bd-45f5-a6e0-429227a3c17f"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GenerateIslandUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea1bf0a2-dc8e-4263-b37b-e94b0ef00cfa"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GenerateIslandRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""83f78b40-5f5e-4ea3-aed0-ddce86182f8c"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GenerateIslandDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""49b4b9ed-08e2-46da-ac57-91f7d14c1f99"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GenerateIslandLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4a301860-a7e2-4f85-a021-b1c9cbce9d32"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DamageEnemy"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4fffc0f8-d3b4-4b33-9b30-930c81be9322"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CastSpell"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c6751a79-b358-4f48-8a4c-a2da3b47b336"",
                    ""path"": ""<Keyboard>/rightAlt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RerollIslands"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""451ffa0f-4ec5-4874-b72a-27bbcbf3938d"",
                    ""path"": ""<Keyboard>/rightCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DamagePlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CharacterControls
        m_CharacterControls = asset.FindActionMap("CharacterControls", throwIfNotFound: true);
        m_CharacterControls_Movement = m_CharacterControls.FindAction("Movement", throwIfNotFound: true);
        m_CharacterControls_Sprint = m_CharacterControls.FindAction("Sprint", throwIfNotFound: true);
        m_CharacterControls_CameraFocus = m_CharacterControls.FindAction("CameraFocus", throwIfNotFound: true);
        m_CharacterControls_CameraRotateRight = m_CharacterControls.FindAction("CameraRotateRight", throwIfNotFound: true);
        m_CharacterControls_CameraRotateLeft = m_CharacterControls.FindAction("CameraRotateLeft", throwIfNotFound: true);
        m_CharacterControls_Interact = m_CharacterControls.FindAction("Interact", throwIfNotFound: true);
        m_CharacterControls_Attack = m_CharacterControls.FindAction("Attack", throwIfNotFound: true);
        m_CharacterControls_MovementsMouse = m_CharacterControls.FindAction("MovementsMouse", throwIfNotFound: true);
        // Interface
        m_Interface = asset.FindActionMap("Interface", throwIfNotFound: true);
        m_Interface_Pause = m_Interface.FindAction("Pause", throwIfNotFound: true);
        m_Interface_Inventory = m_Interface.FindAction("Inventory", throwIfNotFound: true);
        // DebugKeys
        m_DebugKeys = asset.FindActionMap("DebugKeys", throwIfNotFound: true);
        m_DebugKeys_Debug = m_DebugKeys.FindAction("Debug", throwIfNotFound: true);
        m_DebugKeys_GenerateIsland = m_DebugKeys.FindAction("GenerateIsland", throwIfNotFound: true);
        m_DebugKeys_GenerateIslandUp = m_DebugKeys.FindAction("GenerateIslandUp", throwIfNotFound: true);
        m_DebugKeys_GenerateIslandRight = m_DebugKeys.FindAction("GenerateIslandRight", throwIfNotFound: true);
        m_DebugKeys_GenerateIslandDown = m_DebugKeys.FindAction("GenerateIslandDown", throwIfNotFound: true);
        m_DebugKeys_GenerateIslandLeft = m_DebugKeys.FindAction("GenerateIslandLeft", throwIfNotFound: true);
        m_DebugKeys_DamageEnemy = m_DebugKeys.FindAction("DamageEnemy", throwIfNotFound: true);
        m_DebugKeys_CastSpell = m_DebugKeys.FindAction("CastSpell", throwIfNotFound: true);
        m_DebugKeys_RerollIslands = m_DebugKeys.FindAction("RerollIslands", throwIfNotFound: true);
        m_DebugKeys_DamagePlayer = m_DebugKeys.FindAction("DamagePlayer", throwIfNotFound: true);
    }

    ~@PlayerInput()
    {
        Debug.Assert(!m_CharacterControls.enabled, "This will cause a leak and performance issues, PlayerInput.CharacterControls.Disable() has not been called.");
        Debug.Assert(!m_Interface.enabled, "This will cause a leak and performance issues, PlayerInput.Interface.Disable() has not been called.");
        Debug.Assert(!m_DebugKeys.enabled, "This will cause a leak and performance issues, PlayerInput.DebugKeys.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CharacterControls
    private readonly InputActionMap m_CharacterControls;
    private List<ICharacterControlsActions> m_CharacterControlsActionsCallbackInterfaces = new List<ICharacterControlsActions>();
    private readonly InputAction m_CharacterControls_Movement;
    private readonly InputAction m_CharacterControls_Sprint;
    private readonly InputAction m_CharacterControls_CameraFocus;
    private readonly InputAction m_CharacterControls_CameraRotateRight;
    private readonly InputAction m_CharacterControls_CameraRotateLeft;
    private readonly InputAction m_CharacterControls_Interact;
    private readonly InputAction m_CharacterControls_Attack;
    private readonly InputAction m_CharacterControls_MovementsMouse;
    public struct CharacterControlsActions
    {
        private @PlayerInput m_Wrapper;
        public CharacterControlsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_CharacterControls_Movement;
        public InputAction @Sprint => m_Wrapper.m_CharacterControls_Sprint;
        public InputAction @CameraFocus => m_Wrapper.m_CharacterControls_CameraFocus;
        public InputAction @CameraRotateRight => m_Wrapper.m_CharacterControls_CameraRotateRight;
        public InputAction @CameraRotateLeft => m_Wrapper.m_CharacterControls_CameraRotateLeft;
        public InputAction @Interact => m_Wrapper.m_CharacterControls_Interact;
        public InputAction @Attack => m_Wrapper.m_CharacterControls_Attack;
        public InputAction @MovementsMouse => m_Wrapper.m_CharacterControls_MovementsMouse;
        public InputActionMap Get() { return m_Wrapper.m_CharacterControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterControlsActions set) { return set.Get(); }
        public void AddCallbacks(ICharacterControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_CharacterControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CharacterControlsActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Sprint.started += instance.OnSprint;
            @Sprint.performed += instance.OnSprint;
            @Sprint.canceled += instance.OnSprint;
            @CameraFocus.started += instance.OnCameraFocus;
            @CameraFocus.performed += instance.OnCameraFocus;
            @CameraFocus.canceled += instance.OnCameraFocus;
            @CameraRotateRight.started += instance.OnCameraRotateRight;
            @CameraRotateRight.performed += instance.OnCameraRotateRight;
            @CameraRotateRight.canceled += instance.OnCameraRotateRight;
            @CameraRotateLeft.started += instance.OnCameraRotateLeft;
            @CameraRotateLeft.performed += instance.OnCameraRotateLeft;
            @CameraRotateLeft.canceled += instance.OnCameraRotateLeft;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @MovementsMouse.started += instance.OnMovementsMouse;
            @MovementsMouse.performed += instance.OnMovementsMouse;
            @MovementsMouse.canceled += instance.OnMovementsMouse;
        }

        private void UnregisterCallbacks(ICharacterControlsActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Sprint.started -= instance.OnSprint;
            @Sprint.performed -= instance.OnSprint;
            @Sprint.canceled -= instance.OnSprint;
            @CameraFocus.started -= instance.OnCameraFocus;
            @CameraFocus.performed -= instance.OnCameraFocus;
            @CameraFocus.canceled -= instance.OnCameraFocus;
            @CameraRotateRight.started -= instance.OnCameraRotateRight;
            @CameraRotateRight.performed -= instance.OnCameraRotateRight;
            @CameraRotateRight.canceled -= instance.OnCameraRotateRight;
            @CameraRotateLeft.started -= instance.OnCameraRotateLeft;
            @CameraRotateLeft.performed -= instance.OnCameraRotateLeft;
            @CameraRotateLeft.canceled -= instance.OnCameraRotateLeft;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @MovementsMouse.started -= instance.OnMovementsMouse;
            @MovementsMouse.performed -= instance.OnMovementsMouse;
            @MovementsMouse.canceled -= instance.OnMovementsMouse;
        }

        public void RemoveCallbacks(ICharacterControlsActions instance)
        {
            if (m_Wrapper.m_CharacterControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICharacterControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_CharacterControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CharacterControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CharacterControlsActions @CharacterControls => new CharacterControlsActions(this);

    // Interface
    private readonly InputActionMap m_Interface;
    private List<IInterfaceActions> m_InterfaceActionsCallbackInterfaces = new List<IInterfaceActions>();
    private readonly InputAction m_Interface_Pause;
    private readonly InputAction m_Interface_Inventory;
    public struct InterfaceActions
    {
        private @PlayerInput m_Wrapper;
        public InterfaceActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pause => m_Wrapper.m_Interface_Pause;
        public InputAction @Inventory => m_Wrapper.m_Interface_Inventory;
        public InputActionMap Get() { return m_Wrapper.m_Interface; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InterfaceActions set) { return set.Get(); }
        public void AddCallbacks(IInterfaceActions instance)
        {
            if (instance == null || m_Wrapper.m_InterfaceActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InterfaceActionsCallbackInterfaces.Add(instance);
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @Inventory.started += instance.OnInventory;
            @Inventory.performed += instance.OnInventory;
            @Inventory.canceled += instance.OnInventory;
        }

        private void UnregisterCallbacks(IInterfaceActions instance)
        {
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @Inventory.started -= instance.OnInventory;
            @Inventory.performed -= instance.OnInventory;
            @Inventory.canceled -= instance.OnInventory;
        }

        public void RemoveCallbacks(IInterfaceActions instance)
        {
            if (m_Wrapper.m_InterfaceActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInterfaceActions instance)
        {
            foreach (var item in m_Wrapper.m_InterfaceActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InterfaceActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InterfaceActions @Interface => new InterfaceActions(this);

    // DebugKeys
    private readonly InputActionMap m_DebugKeys;
    private List<IDebugKeysActions> m_DebugKeysActionsCallbackInterfaces = new List<IDebugKeysActions>();
    private readonly InputAction m_DebugKeys_Debug;
    private readonly InputAction m_DebugKeys_GenerateIsland;
    private readonly InputAction m_DebugKeys_GenerateIslandUp;
    private readonly InputAction m_DebugKeys_GenerateIslandRight;
    private readonly InputAction m_DebugKeys_GenerateIslandDown;
    private readonly InputAction m_DebugKeys_GenerateIslandLeft;
    private readonly InputAction m_DebugKeys_DamageEnemy;
    private readonly InputAction m_DebugKeys_CastSpell;
    private readonly InputAction m_DebugKeys_RerollIslands;
    private readonly InputAction m_DebugKeys_DamagePlayer;
    public struct DebugKeysActions
    {
        private @PlayerInput m_Wrapper;
        public DebugKeysActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Debug => m_Wrapper.m_DebugKeys_Debug;
        public InputAction @GenerateIsland => m_Wrapper.m_DebugKeys_GenerateIsland;
        public InputAction @GenerateIslandUp => m_Wrapper.m_DebugKeys_GenerateIslandUp;
        public InputAction @GenerateIslandRight => m_Wrapper.m_DebugKeys_GenerateIslandRight;
        public InputAction @GenerateIslandDown => m_Wrapper.m_DebugKeys_GenerateIslandDown;
        public InputAction @GenerateIslandLeft => m_Wrapper.m_DebugKeys_GenerateIslandLeft;
        public InputAction @DamageEnemy => m_Wrapper.m_DebugKeys_DamageEnemy;
        public InputAction @CastSpell => m_Wrapper.m_DebugKeys_CastSpell;
        public InputAction @RerollIslands => m_Wrapper.m_DebugKeys_RerollIslands;
        public InputAction @DamagePlayer => m_Wrapper.m_DebugKeys_DamagePlayer;
        public InputActionMap Get() { return m_Wrapper.m_DebugKeys; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DebugKeysActions set) { return set.Get(); }
        public void AddCallbacks(IDebugKeysActions instance)
        {
            if (instance == null || m_Wrapper.m_DebugKeysActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DebugKeysActionsCallbackInterfaces.Add(instance);
            @Debug.started += instance.OnDebug;
            @Debug.performed += instance.OnDebug;
            @Debug.canceled += instance.OnDebug;
            @GenerateIsland.started += instance.OnGenerateIsland;
            @GenerateIsland.performed += instance.OnGenerateIsland;
            @GenerateIsland.canceled += instance.OnGenerateIsland;
            @GenerateIslandUp.started += instance.OnGenerateIslandUp;
            @GenerateIslandUp.performed += instance.OnGenerateIslandUp;
            @GenerateIslandUp.canceled += instance.OnGenerateIslandUp;
            @GenerateIslandRight.started += instance.OnGenerateIslandRight;
            @GenerateIslandRight.performed += instance.OnGenerateIslandRight;
            @GenerateIslandRight.canceled += instance.OnGenerateIslandRight;
            @GenerateIslandDown.started += instance.OnGenerateIslandDown;
            @GenerateIslandDown.performed += instance.OnGenerateIslandDown;
            @GenerateIslandDown.canceled += instance.OnGenerateIslandDown;
            @GenerateIslandLeft.started += instance.OnGenerateIslandLeft;
            @GenerateIslandLeft.performed += instance.OnGenerateIslandLeft;
            @GenerateIslandLeft.canceled += instance.OnGenerateIslandLeft;
            @DamageEnemy.started += instance.OnDamageEnemy;
            @DamageEnemy.performed += instance.OnDamageEnemy;
            @DamageEnemy.canceled += instance.OnDamageEnemy;
            @CastSpell.started += instance.OnCastSpell;
            @CastSpell.performed += instance.OnCastSpell;
            @CastSpell.canceled += instance.OnCastSpell;
            @RerollIslands.started += instance.OnRerollIslands;
            @RerollIslands.performed += instance.OnRerollIslands;
            @RerollIslands.canceled += instance.OnRerollIslands;
            @DamagePlayer.started += instance.OnDamagePlayer;
            @DamagePlayer.performed += instance.OnDamagePlayer;
            @DamagePlayer.canceled += instance.OnDamagePlayer;
        }

        private void UnregisterCallbacks(IDebugKeysActions instance)
        {
            @Debug.started -= instance.OnDebug;
            @Debug.performed -= instance.OnDebug;
            @Debug.canceled -= instance.OnDebug;
            @GenerateIsland.started -= instance.OnGenerateIsland;
            @GenerateIsland.performed -= instance.OnGenerateIsland;
            @GenerateIsland.canceled -= instance.OnGenerateIsland;
            @GenerateIslandUp.started -= instance.OnGenerateIslandUp;
            @GenerateIslandUp.performed -= instance.OnGenerateIslandUp;
            @GenerateIslandUp.canceled -= instance.OnGenerateIslandUp;
            @GenerateIslandRight.started -= instance.OnGenerateIslandRight;
            @GenerateIslandRight.performed -= instance.OnGenerateIslandRight;
            @GenerateIslandRight.canceled -= instance.OnGenerateIslandRight;
            @GenerateIslandDown.started -= instance.OnGenerateIslandDown;
            @GenerateIslandDown.performed -= instance.OnGenerateIslandDown;
            @GenerateIslandDown.canceled -= instance.OnGenerateIslandDown;
            @GenerateIslandLeft.started -= instance.OnGenerateIslandLeft;
            @GenerateIslandLeft.performed -= instance.OnGenerateIslandLeft;
            @GenerateIslandLeft.canceled -= instance.OnGenerateIslandLeft;
            @DamageEnemy.started -= instance.OnDamageEnemy;
            @DamageEnemy.performed -= instance.OnDamageEnemy;
            @DamageEnemy.canceled -= instance.OnDamageEnemy;
            @CastSpell.started -= instance.OnCastSpell;
            @CastSpell.performed -= instance.OnCastSpell;
            @CastSpell.canceled -= instance.OnCastSpell;
            @RerollIslands.started -= instance.OnRerollIslands;
            @RerollIslands.performed -= instance.OnRerollIslands;
            @RerollIslands.canceled -= instance.OnRerollIslands;
            @DamagePlayer.started -= instance.OnDamagePlayer;
            @DamagePlayer.performed -= instance.OnDamagePlayer;
            @DamagePlayer.canceled -= instance.OnDamagePlayer;
        }

        public void RemoveCallbacks(IDebugKeysActions instance)
        {
            if (m_Wrapper.m_DebugKeysActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDebugKeysActions instance)
        {
            foreach (var item in m_Wrapper.m_DebugKeysActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DebugKeysActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DebugKeysActions @DebugKeys => new DebugKeysActions(this);
    public interface ICharacterControlsActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnCameraFocus(InputAction.CallbackContext context);
        void OnCameraRotateRight(InputAction.CallbackContext context);
        void OnCameraRotateLeft(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnMovementsMouse(InputAction.CallbackContext context);
    }
    public interface IInterfaceActions
    {
        void OnPause(InputAction.CallbackContext context);
        void OnInventory(InputAction.CallbackContext context);
    }
    public interface IDebugKeysActions
    {
        void OnDebug(InputAction.CallbackContext context);
        void OnGenerateIsland(InputAction.CallbackContext context);
        void OnGenerateIslandUp(InputAction.CallbackContext context);
        void OnGenerateIslandRight(InputAction.CallbackContext context);
        void OnGenerateIslandDown(InputAction.CallbackContext context);
        void OnGenerateIslandLeft(InputAction.CallbackContext context);
        void OnDamageEnemy(InputAction.CallbackContext context);
        void OnCastSpell(InputAction.CallbackContext context);
        void OnRerollIslands(InputAction.CallbackContext context);
        void OnDamagePlayer(InputAction.CallbackContext context);
    }
}
